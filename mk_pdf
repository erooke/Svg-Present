#! /bin/python
import argparse
import multiprocessing
import subprocess
import tempfile
import time
import xml.etree.ElementTree


def main():
    """
    Renders a pdf slideshow from a single svg.
    This process happens in three steps:
        0. Parse user input
        1. Split the svg into one svg file per slide
        2. Use inkscape to render each of these svgs to pdfs
        3. Combine each pdf into one master pdf
    """
    parser = argparse.ArgumentParser(
            description='A python script to create slides using inkscape'
            )

    parser.add_argument(
            'files',
            metavar='file',
            nargs='+',
            help='Inkscape file to use'
            )

    parser.add_argument(
            '-o',
            '--output',
            metavar='file',
            help='Output for the slideshow',
            nargs='?',
            default='talk.pdf'
            )

    parser.add_argument(
            '-j',
            '--threads',
            metavar='num',
            help='How many inkscape processess to spawn',
            nargs='?',
            type=int,
            default=multiprocessing.cpu_count() - 1
            )

    args = parser.parse_args()

    presentation = Tree()

    for file in args.files:
        presentation.children.append(load_presentation(file))

    dir = tempfile.TemporaryDirectory()

    render_cmds = []

    merge_cmd = ['/usr/bin/gs',
                 '-dBATCH',
                 '-dNOPAUSE',
                 '-q',
                 '-sDEVICE=pdfwrite',
                 '-sOutputFile=' + args.output]

    count = 0
    spinner = "⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"

    # Split the slides, compute the commands to render the slides
    while next(presentation):
        svg = dir.name + "/" + str(count) + ".svg"
        pdf = dir.name + "/" + str(count) + ".pdf"
        merge_cmd.append(pdf)
        presentation.children[presentation.index].tree.write(svg)
        render_cmds.append(["/usr/bin/inkscape",
                            "-o", pdf,
                            svg])

        count = (count + 1) % 10
        print("\r{} Splitting slides".format(spinner[count]), end="")
    print("\r✓ Splitting slides")

    procs = [None] * args.threads
 
    # Run each of the render commands previously computed
    while procs:
        run(procs, render_cmds)
        count = (count + 1) % 10
        print("\r{} Rendering Pdfs".format(spinner[count]), end="")
        time.sleep(0.03)
    print("\r✓ Rendering Pdfs")

    # Merge each of the pdfs into one pdf
    merge = subprocess.Popen(merge_cmd)
    while merge.poll() is None:
        count = (count + 1) % 10
        print("\r{} Merging slides".format(spinner[count]), end="")
        time.sleep(0.03)
    print("\r✓ Merging slides")


def inkscape(name):
    """ Add the inkscape namespace to a name """
    return '{http://www.inkscape.org/namespaces/inkscape}' + name


def run(procs, cmds):
    """ Budget worker pool """
    if not cmds:
        for i, proc in enumerate(procs):
            if proc is None or proc.poll() is not None:
                _ = procs.pop(i)
                return
        return

    for i, proc in enumerate(procs):
        if proc is None or proc.poll() is not None:
            procs[i] = subprocess.Popen(cmds.pop(), stderr=subprocess.DEVNULL)
            break


class Tree:
    def __init__(self, element=None):
        self.children = []
        self.element = element
        self.index = None


def next(tree):
    """ Move to the next slide """
    if tree.index is None:
        # Initial setup
        tree.index = 0

        if tree.element is not None:
            tree.element.set('style', 'display:inline')

        if tree.children:
            next(tree.children[0])

        return True

    try:
        if not next(tree.children[tree.index]):
            tree.index += 1
            next(tree.children[tree.index])

    except IndexError:
        # If at any point we run out of children there is no next element
        if tree.element:
            tree.element.set('style', 'display:none')
        return False

    return True


def layer(element):
    if element.get(inkscape('groupmode')) != 'layer':
        return None

    label = element.get(inkscape('label'))

    if label[0] == '(' and label[-1] == ')':
        return None

    element.set('style', 'display:none')
    tree = Tree(element)

    for child in element:
        maybe_tree = layer(child)
        if maybe_tree:
            tree.children.append(maybe_tree)

    return tree


def load_presentation(file):
    """ Load a presentation from an svg file on disk """
    tree = xml.etree.ElementTree.parse(file)
    root = tree.getroot()
    slides = Tree()
    slides.tree = tree
    for child in root:
        maybe_slides = layer(child)
        if maybe_slides is not None:
            slides.children.append(maybe_slides)

    return slides


if __name__ == '__main__':
    main()
