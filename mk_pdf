#! /bin/python
import argparse
import multiprocessing
import subprocess
import tempfile
import xml.etree.ElementTree


def inkscape(name):
    """ Add the inkscape namespace to a name """
    return '{http://www.inkscape.org/namespaces/inkscape}' + name


class Slides:
    """
    A rose tree representation of a slide show each
    leaf corresponds to a slide, any parent is set
    to visible if that leaf is visible.
    """
    def __init__(self, element, tree=None):
        self.tree = tree
        self.element = None
        self.index = -1
        self.children = []

        if element is None:
            return

        groupmode = element.get(inkscape('groupmode'))
        if groupmode == 'layer':
            self.element = element

        for child in element:
            groupmode = child.get(inkscape('groupmode'))

            if groupmode != 'layer':
                continue

            label = child.get(inkscape('label'))

            if label[0] == '(' and label[-1] == ')':
                continue

            slide = Slides(child)
            slide.hide()
            self.children.append(slide)

    def write(self, file):
        self.children[self.index].tree.write(file)

    def visible(self):
        """ Set the element to visible """
        if self.element is not None:
            self.element.set('style', 'display:inline')

    def hide(self):
        """ Set the element to invisible """
        if self.element is not None:
            self.element.set('style', 'display:none')

    def next(self):
        """ Move to the next slide """
        if self.index == -1:
            # Initial setup
            self.index += 1
            self.visible()

            if self.children:
                self.children[0].next()

            return True

        try:
            if not self.children[self.index].next():
                self.index += 1
                self.children[self.index].next()

        except IndexError:
            # If at any point we run out of children there is no next element
            self.hide()
            return False

        return True

    def __len__(self):
        """ How many slides are in the presentation """
        if not self.children:
            return 1
        result = 0
        for child in self.children:
            result += len(child)
        return result


def get_args():
    """ Get command line arguments """
    parser = argparse.ArgumentParser(
            description='A python script to create slides using inkscape'
            )

    parser.add_argument(
            'files',
            metavar='file',
            nargs='+',
            help='Inkscape file to use'
            )

    parser.add_argument(
            '-v',
            '--verbose',
            help='Print status information',
            action='store_true'
            )

    parser.add_argument(
            '-o',
            '--output',
            metavar='file',
            help='Output for the slideshow',
            nargs='?',
            default='talk.pdf'
            )

    parser.add_argument(
            '-j',
            '--threads',
            metavar='num',
            help='How many inkscape processess to spawn',
            nargs='?',
            type=int,
            default=multiprocessing.cpu_count() - 1
            )

    return parser.parse_args()


def load_presentation(file):
    """ Load a presentation from an svg file on disk """
    tree = xml.etree.ElementTree.parse(file)
    root = tree.getroot()
    return Slides(root, tree)


def main():
    args = get_args()
    presentation = Slides(None)

    for file in args.files:
        presentation.children.append(load_presentation(file))

    count = 0
    total = len(presentation)
    pdfs = []
    cmds = []

    dir = tempfile.TemporaryDirectory()

    while presentation.next():
        svg = dir.name + "/" + str(count) + ".svg"
        pdf = dir.name + "/" + str(count) + ".pdf"
        pdfs.append(pdf)
        presentation.write(svg)
        cmds.append(["/usr/bin/inkscape",
                     "-o", pdf,
                     svg])
        count += 1
        if args.verbose:
            print("\rSplitting slides: {}/{}".format(count, total), end="")

    if args.verbose:
        print("")

    procs = []
    count = 0
    while cmds:
        if len(procs) <= args.threads:
            procs.append(subprocess.Popen(cmds.pop()))
            continue

        for num, proc in enumerate(procs):
            if proc.poll() is not None:
                procs[num] = subprocess.Popen(cmds.pop())
                count += 1

                if args.verbose:
                    print(
                        "\rRendering Pdfs: {}/{}".format(count, total),
                        end=""
                        )

                break

    for proc in procs:
        proc.wait()
        count += 1

        if args.verbose:
            print("\rRendering Pdfs: {}/{}".format(count, total), end="")

    if args.verbose:
        print("\nMerging slides... ", end="")

    cmd = ['/usr/bin/gs',
           '-dBATCH',
           '-dNOPAUSE',
           '-q',
           '-sDEVICE=pdfwrite',
           '-sOutputFile=' + args.output]

    for pdf in pdfs:
        cmd.append(pdf)

    subprocess.run(cmd)

    if args.verbose:
        print("done!")

    dir.cleanup()


if __name__ == '__main__':
    main()
